{
  "hash": "8ca8dffd7ba84c777800934786e2ca74",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"IEC Wind Turbine Type 3 (Doubly-Fed Induction Generator)\"\ntags: [\"regulations\", \"WT\", \"wind\", \"controller\", \"Opensource\", \"IEC\", \"RMS\", \"modelica\", \"dynawo\", \"#62\"]\ndate: 20/12/2024\nlast-updated: 20/12/2024\nauthors: \"Martin Franke (Fraunhofer IEE), Luka Plavec (Fraunhofer IEE)\"\nreviewers: \"Lampros Papangelis (CRESYM)\"\nid: \"#62\"\nbibliography: ../../../../_bibliography/references.bib\n---\n\n**List Of Acronyms**\n\n\n|----------|-------------------------------------|\n| $DFIG$     | Doubly-Fed Induction Generator      |\n| $FRT$      | Fault Ride Through                  |\n| $GSC$      | Grid Side Converter                 |\n| $PCC$      | Point of Common Coupling            |\n| $PD$       | Power Device                        |\n| $RSC$      | Rotor Side Converter                |\n| $WP$       | Wind Plant                          |\n| $WT$       | Wind Turbine                        |\n\n## Context\n\nThis document refers to the IEC 61400-27-1 models which have been\ndeveloped with the following specifications in mind [@IEC_61400-27-1]:\n\n- Use in wind power plant models or standalone wind turbines\n\n- Specification for generic simulation models covering most WT types\n\n- Models address four categories of existing WT technologies (NERC\n  nomenclature):\n\n  - **Type 1:** Conventional asynchronous generators (squirrel cage)\n  - **Type 2:** Variable rotor resistance asynchronous generators\n  - **Type 3:** Doubly-fed induction generators (stator connected\n    directly; rotor through converter)\n  - **Type 4:** Synchronous generator, grid-connected via a full-size\n    power converter\n\nOther model considerations according to [@IEC_61400-27-1]:\n\n- Include over/under frequency and voltage protection for realistic WT\n  disconnection modeling\n- Account for turbine-generator inertia and first drive train torsional\n  mode impacts on power swings\n- Phase-locked loop dynamics are not included in the models (they are\n  modeled through a first order lag element)\n\nThe IEC 61400-27-1 [@IEC_61400-27-1] defines one of the most widely used series of\nRMS models for Wind Turbine (WT) generators, another one being the WECC\nmodel series, developed by EPRI.\n\nThe models are separated in several sub systems. The information and\ndrawings are taken from [@IEC_61400-27-1] [@Honrubia-Escribano2018] [@Fortmann2013] [@Fortmann2014] [@Lorenzo-Bonache2017] [@Lorenzo-Bonache2019].\n\n## Model use, assumptions, validity domain and limitations\n\nThe controller of the generic Type 3 WT model does not represent the\nactual controller of the WT, which sets the references of the\nRotor Side Converter (RSC) and the Grid Side Converter (GSC), but\nprovides the current command signals to obtain an accurate response of\nactive and reactive power, observed from the grid side.\n\nThe models are positive-sequence RMS models, hence they assume\nsymmetrical operating conditions and neglect high-frequency dynamics.\nThis type of models is often used in large-scale stability studies, for\nwhich it reflects the relevant phenomena. It is not a detailed physical\nmodel of the unit. Also for some stability phenomena (e.g. resonance\nstability) this model is not sufficient and EMT models or other\napproaches may be necessary.\n\nSpecifically, [@IEC_61400-27-1] defines the following validity domain:\n\n- positive sequence dynamics\n- transmission grid simulations\n- reference value changes\n- steady state voltage deviations (0.85 pu … 1.15 pu)\n- phase jumps\n- symmetrical faults, including short-circuits of varying impedance,\n  where voltage can dip to close to zero (typical e.g. 0.18 pu)\n- frequency disturbances, variations $\\pm$ 6 %\n- electromechanical modes of synchronous generator rotor oscillations\n  (0.2 Hz … 4 Hz)\n- Typical simulation time frame: 10 s … 30 s\n- Wind speed assumed to be constant during simulation time (wind speed\n  could be included as an external condition through the available\n  power)\n- Simulation step width up to 1/4 fundamental frequency cycle (5 ms at\n  50 Hz), which implies that the model Bandwidth cannot be above 15 Hz.\n- According to [@Honrubia-Escribano2018], the Type 3 WT model can operate with variable\n  speed with slip values from -0.3 to +0.4.\n\nVice versa, [@IEC_61400-27-1] states that the models are not intended for the\nfollowing:\n\n- The models are not designed for long-term stability assessments.\n- The models do not facilitate the exploration of sub-synchronous\n  interaction phenomena.\n- The models do not account for fluctuations due to wind speed\n  variability over time and space, excluding factors such as turbulence,\n  tower shadow, wind shear, and wakes.\n- The models do not encompass phenomena like harmonics, flicker, or\n  other EMC emissions outlined in the IEC 61000 series.\n- Linearization for eigenvalue analysis is complex and may not be\n  suitable for these simplified models.\n- The IEC standard does not cover the details of short-circuit\n  calculations.\n- The models are not suitable for analyzing extremely weak systems,\n  including scenarios where wind turbines operate in isolation from\n  other synchronous generation or in cases with very low short-circuit\n  ratios.\n- The models do not incorporate negative and zero sequence components.\n\n## Wind turbine type 3\n\n![Wind turbine type 3 model](drawings/WT_system.drawio.svg){#fig-wtSystem}\n\n::: {#fig-wtSystem}\nWind turbine type 3 model, based on [@IEC_61400-27-1]\n:::\n\n![Wind turbine generator control sub-structure](drawings/WT_generator_control_substructure_type3.drawio.svg){#fig-wtControlSubstructure}\n\n::: {#fig-wtControlSubstructure}\nWind turbine generator control sub-structure for Type 3A and 3B WT, based on [@IEC_61400-27-1]\n:::\n\n### P control module\n\nFor detailed assessment of the parameters' impact on model behaviour,\nsee [@Lorenzo-Bonache2017].\n\n![Wind turbine P control module](drawings/WT_P_control_type3.drawio.svg){#fig-wtPControl}\n\n::: {#fig-wtPControl}\nWind turbine P control module (Type 3), based on [@IEC_61400-27-1]\n:::\n\n@fig-wtPControl shows the\nwind turbine active power control scheme.\n\nThe control's general behaviour is dominated by $\\omega(p)$, a\nlookup-table that provides the angular velocity at which the turbine\nshould rotate when it is injecting a certain active power [@Lorenzo-Bonache2019]. A\npossible look-up table for this system is shown in\n@fig-lookup-table-omega-pref,\nwhich is representing example values from *DIgSILENT PowerFactory*\n[@DIgSILENT2024].\n\nThe power-speed-characteristic in\n@fig-lookup-table-omega-pref\nhas four main operating zones according to [@Lorenzo-Bonache2017]:\n\n- **Zone 1:** The minimum rotational speed has been reached and hence\n  cannot decrease further due to physical (component) limits, mainly\n  maximum slip of the converter.\n- **Zone 2:** Between minimum rotational speed to rated rotational\n  speed; maximum power tracking mode.\n- **Zone 3:** Fixed at rated speed and below the rated active power. In\n  some cases, instead of a fixed rated rotational speed, there is a\n  linear rotational speed variation to achieve the rated rotational\n  speed at the rated active power.\n- **Zone 4:** Rated rotational speed and rated active power.\n\n> **Note**\n>\n> Dotted lines in\n> @fig-lookup-table-omega-pref\n> imply that, for simulations, the active power reference presents a\n> certain slope, offering more stable simulations. Under real control\n> conditions, this look-up table has two vertical lines, as shown by the\n> solid lines. [@Lorenzo-Bonache2017]\n\n<details class=\"code-fold\">\n<summary>Code</summary>\n\n``` python\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\ncolors = sns.color_palette('Set2')\nsns.set_palette(colors)\n\nplt.plot(\n    [0.755,  0.76,   0.86,   0.94,   1,      1.01], \n    [0,      0.3,    0.31,   0.4,    0.5,    1], \n    '--', c=colors[0])\nplt.plot(\n    [0.76,  0.76,   0.86,   0.94,   1,      1], \n    [0,     0.3,    0.31,   0.4,    0.5,    1], \n    '-x', c=colors[0])\nplt.grid()\n_ = plt.ylabel(r'$$p_\\mathrm{WT}$$ in pu')\n_ = plt.xlabel(r'$$\\omega_\\mathrm{ref}$$ in pu')\nplt.xlim(0.7,1.1)\n_ = plt.text(1.03, .99, 'Zone 4', ha='left', va='top')\n_ = plt.text(.99, .8, 'Zone 3', ha='right', va='top')\n_ = plt.text(.9, .45, 'Zone 2', ha='right', va='top')\n_ = plt.text(.745, .1, 'Zone 1', ha='right', va='top')\n```\n\n</details>\n\n![Lookup table for reference rotation speed](drawings/fig-lookup-table-omega-pref-output-1.png){#fig-lookup-table-omega-pref}\n\n::: {#fig-lookup-table-omega-pref}\nLookup table for reference rotation speed as a function of WT active power; according to [@Lorenzo-Bonache2017] and with data from [@DIgSILENT2024] (see @tbl-wtLookupTable)\n:::\n\nThe power-speed-characteristic's speed reference output is then filtered\n($T_\\mathrm{\\omega ref}$) to avoid sudden changes.\n\n> **Note**\n>\n> The time constant $T_\\mathrm{\\omega ref}$ can be set to a very high\n> value to enforce a fixed reference rotational speed during the\n> simulation, which can be a desired operational mode. [@Lorenzo-Bonache2017]\n\nThe filtered speed reference $\\omega_\\mathrm{ref}$ is subtracted from\nthe measured angular velocity $\\omega_\\text{gen}$ (generator speed) or\n$\\omega_\\mathrm{WTR}$ (turbine speed), depending on the mode\n$M_\\mathrm{\\omega Tqpi}$ to get the speed error $\\omega_\\mathrm{err}$.\nThe measured speed can be filtered by the first order lag element with\ntime constant $T_\\mathrm{\\omega filtp3}$.\n\nSince $\\omega_\\mathrm{gen}$ comes from the mechanical module which only\nmodels the drive train resonant frequency, this first order lag is\nintended as a filter for only this oscillation. Since it is a low pass,\nit won't be able to efficiently filter that resonance from the signal.\nAlternatively, by setting $M_\\mathrm{\\omega Tqpi}=\\mathrm{true}$, the\nrotor speed $\\omega_\\mathrm{WTR}$ can be used instead of the generator\nspeed, which acts as a simpler way to determine a filtered value of\n$\\omega_\\mathrm{gen}$ [@Lorenzo-Bonache2017].\n\nThe speed error $\\omega_\\mathrm{err}$ is then given to the *Torque PI\ncontroller* (@fig-torquePi),\nwhich outputs the electromagnetic torque reference $\\tau_\\mathrm{out}$\n[@Lorenzo-Bonache2019].\n\nAnother input to the torque PI subsystem (see [Torque PI block](#torque-pi-block)) is the\nmaximum electromagnetic torque $\\tau_\\mathrm{emax}$. It is determined by\ncalculating a torque value from [@Lorenzo-Bonache2017]:\n\n- The reference power value $p_\\mathrm{WTref}$, during voltage dips\n  optionally scaled down by the terminal voltage $u_\\mathrm{WTC}$ (if\n  $M_\\mathrm{pUscale}=\\mathrm{true}$)\n- And a rotational speed, either the turbine rotor speed\n  $\\omega_\\mathrm{WTR}$ (if $M_\\mathrm{\\omega Tmax}=\\mathrm{false}$) or\n  the speed reference value $\\omega_\\mathrm{ref}$ (if\n  $M_\\mathrm{\\omega Tmax}=\\mathrm{true}$).\n\nAfter the torque PI controller, the electromagnetic torque reference\n$\\tau_\\mathrm{out}$ is multiplied by the generator's rotational speed\n$\\omega_\\mathrm{gen}$ to obtain a power reference [@Lorenzo-Bonache2019].\n\nTo obtain the active current command $i_\\mathrm{pcmd}$, $p_\\mathrm{ord}$\nis divided by the measured voltage $u_\\mathrm{WTCfilt}$.\n\nTo the active power order $p_\\mathrm{ord}$ an additional component from\nthe Drive Train Damping (DTD) system is added. Physically, the DTD\nprovides an electrical torque that accounts for natural damping by\nconsidering speed differences between both low and high speed shafts\n(either side of the gearbox) [@Lorenzo-Bonache2017]. It is modeled through a second-order\ntransfer function as shown towards the bottom right of\n@fig-wtPControl:\n\n$$\nK_{\\text{DTD}} \\cdot \\frac{2 \\zeta \\omega_{\\text{DTD}} s}{s^2 + 2 \\zeta \\omega_{\\text{DTD}} s + \\omega_{\\text{DTD}}^2}\n$$\n\nAs mentioned above, in this model the DTD is represented by an active\npower component, not a torque. The transfer function outputs an\noscillating electrical power that has an efficient damping effect [@Lorenzo-Bonache2017]\n(for parameters see \n@tbl-parameters).\n\n**Torque PI block**\n\n![Wind turbine torque PI block](drawings/WT_torque_pi.drawio.svg){#fig-torquePi}\n\n::: {#fig-torquePi}\nWind turbine torque PI block (Type 3), based on [@IEC_61400-27-1]\n:::\n\nIn @fig-torquePi the Torque\nPI Block can be seen. It acts as a PI-controller and is a subsystem of\nthe active power control in\n@fig-wtPControl [@Lorenzo-Bonache2019].\n\nFor the calculation of the speed error input $\\omega_\\mathrm{err}$ and\nthe maximum electromagnetic torque input $\\tau_\\mathrm{emax}$, see the P control module section above.\n\n**Proportional and integral parts of the controller**\n\nThe proportional controller part is realized by $K_\\mathrm{Pp}$.\n\nThe integral part of the controller output is the minimum of the\nfollowing two signals [@Lorenzo-Bonache2019]:\n\n- The output of the integral controller $K_\\mathrm{Ip}/K_\\mathrm{Pp}$\n- A torque value increasing as a ramp with rising rate\n  $\\mathrm{d}\\tau_\\mathrm{max}$, which can be used to control the\n  mechanical stress or to meet grid code requirements. This is set to\n  $\\tau_\\mathrm{reset}$ when a low voltage fault occurs and ramps\n  upwards after the fault.\n\n**Behavior during low voltage faults**\n\nThe *Delay Flag* block takes a boolean value $F_\\mathrm{i}$ as input. If\n$F_\\mathrm{i}$ steps to 1, the integer output $F_\\mathrm{o}$ is 1 and a\n*timer* starts to run. As soon as $F_\\mathrm{i}$ steps back to 0,\n$F_\\mathrm{o}$ steps to 2 if the *timer* has not reached\n$T_\\mathrm{DVS}$. Once the timer reaches $T_\\mathrm{DVS}$,\n$F_\\mathrm{o}$ steps back to 0. [@IEC_61400-27-1]\n\nThe delay flag block is used to implement the following fault signals:\n\n- $F_\\mathrm{reset}$ is true during a volage dip\n  ($u_\\mathrm{WTC} < u_\\mathrm{pdip}$) as well as during and\n  $T_\\mathrm{DVS}$ after a deep voltage dip\n  ($u_\\mathrm{WTC} < u_\\mathrm{DVS}$).\n- $F_\\mathrm{freeze\\,I}$ is true during a voltage dip\n  ($u_\\mathrm{WTC} < u_\\mathrm{pdip}$)\n\nThese fault signals have the following functions:\n\n- $F_\\mathrm{reset}$, while true,\n  - resets and holds both integrators at $\\tau_\\mathrm{reset}$ (see\n    below); for the $K_\\mathrm{Ip}/K_\\mathrm{Pp}$-integrator this can be\n    prevented by setting $M_\\mathrm{pUVRT} = \\mathrm{false}$.\n  - sets the speed error $\\omega_\\mathrm{err}$, i.e. the input to the\n    proportional controller part $K_\\mathrm{Pp}$, to zero\n  - changes the upper ramp rate limit of $\\tau_\\mathrm{reset}$ to\n    $\\mathrm{d}\\tau_\\mathrm{maxUVRT}$ (usually set to zero, preventing\n    $\\tau_\\mathrm{reset}$ from inceasing during fault) [@Lorenzo-Bonache2019]\n- $F_\\mathrm{freeze\\,I}$ freezes the integral controller part\n  ($K_\\mathrm{Ip}/K_\\mathrm{Pp}$) while true.\n\nThe reset value $\\tau_\\mathrm{reset}$ is the minimum value of:\n\n- The measured voltage (during fault) multiplied by factor\n  $\\tau_\\mathrm{uscale}$\n- The output $\\tau_\\mathrm{I}$ of the integrator itself\n- $u_\\mathrm{TChook} + 1$\n\n$\\tau_\\mathrm{uscale}$ can be used to alter the power injection\nbehaviour during fault and also the starting point for power recovery\nafter post-fault. For example, setting it to zero results in zero power\ninjection during fault. Higher values increase power injection, until\nthe current limitation system begins to act. See [@Lorenzo-Bonache2019] for further\ndetails.\n\nWhen $F_\\mathrm{reset}$ returns to false, the proportional controller\n$K_\\mathrm{Pp}$ will work again as before the fault. The integral\ncontroller will increase from $\\tau_\\mathrm{reset}$ to steady-state,\nwith a maximum rate dictated by $\\mathrm{d}\\tau_\\mathrm{max}$ [@Lorenzo-Bonache2019].\n\n**Variable limits integrator with set/reset and freeze**\n\nThe integrators used in the Torque PI model in\n@fig-torquePi need variable\nlimits, set/reset and freeze functionalities. A suggestion for the\nimplementation is shown below and the description follows thereafter.\n\n``` {modelica}\nmodel IntegratorVariableLimitsContinuousSetFreeze \"Integrator with limited value of output (variable limits), set/reset and freeze\"\n    parameter Boolean DefaultLimitMax = true \"If limitMin > limitMax : if true, y = limitMax, if false, y = limitMin\";\n    parameter Real K = 1 \"Integrator gain\";\n    parameter Real LimitMax0 \"Initial value of upper limit\";\n    parameter Real LimitMin0 \"Initial value of lower limit\";\n    parameter Boolean ReinitWhenResetIsReleased = true \"true: integrator state gets reinitialized to 'set' when 'reset' turns false. false: integrator state gets reinitialized to 'set' when 'reset' turns true.\";\n    parameter Real tDer = 1e-3 \"Time constant of derivative filter for limits in s\";\n    parameter Real TolInput = 1e-5 \"Tolerance on limit crossing for integrator input\";\n    parameter Real TolOutput = 1e-5 \"Tolerance on limit crossing for integrator output\";\n    parameter Real LimitDeadband = 0.001 \"Deadband for detecting a limit crossing of the integrator's state\";\n    Real w(start = Y0) \"Integrator state variable\";\n    parameter Real Y0 = 0 \"Initial or guess value of output (must be in the limits limitMin .. limitMax)\";\n\n    Real kFreezeMax \"Freeze coefficient for upper limit\";\n    Real kFreezeMin \"Freeze coefficient for lower limit\";\n    Real derLimitMax \"Filtered derivative of upper limit of output\";\n    Real derLimitMin \"Filtered derivative of lower limit of output\";\n    Modelica.Blocks.Interfaces.BooleanInput freeze \"Optional connector of freeze signal\";\n    Modelica.Blocks.Interfaces.RealInput limitMax \"Connector of Real input signal used as maximum of output y\";\n    Modelica.Blocks.Interfaces.RealInput limitMin \"Connector of Real input signal used as minimum of output y\";\n    Modelica.Blocks.Interfaces.BooleanInput reset \"Optional connector of reset signal\";\n    Modelica.Blocks.Interfaces.RealInput set \"Optional connector of set signal\";\nequation\n    \n    ////////// reset or freeze: keep input = 0\n    if freeze or reset then\n        v = 0;\n    else\n        v = K * u;\n    end if;\n    \n    ////////// reset: reinit integrator's state when set becomes false (or true, depending on ReinitWhenResetIsReleases)\n    when if ReinitWhenResetIsReleased then not reset else reset then\n      reinit(w, set);\n    end when;\n    \n    ////////// integrator with limits\n    derLimitMax = der(limitMax);\n    derLimitMin = der(limitMin);\n    kFreezeMax = 1 / 4 * (1 + tanh((w - limitMax) / TolOutput)) * (1 + tanh((v - derLimitMax) / TolInput));\n    kFreezeMin = 1 / 4 * (1 + tanh((limitMin - w) / TolOutput)) * (1 + tanh((derLimitMin - v) / TolInput));\n    der(w) = derLimitMax * kFreezeMax + derLimitMin * kFreezeMin + v * (1 - kFreezeMax - kFreezeMin);\n    \n    ////////// apply limit or set to output\n    if limitMin > limitMax and DefaultLimitMax then\n        y = limitMax;\n    elseif limitMin > limitMax then\n        y = limitMin;\n    elseif w > limitMax+LimitDeadband then\n        y = limitMax;\n    elseif w < limitMin-LimitDeadband then\n        y = limitMin;\n    elseif reset then\n        y = set;\n    else\n        y = w;\n    end if;\nend IntegratorVariableLimitsContinuousSetFreeze;\n```\n\nThis blocks computes `w` as integral of the input `u` multiplied by the\ngain `K`, with `v = K * u`. If the integral reaches a given upper limit\nlimitMax or lower limit limitMin, the integration is halted and only\nrestarted if the input drives the integral away from the bounds.\n\nThis freeze is imposed through two coefficients `kFreezeMax` and\n`kFreezeMin`, each defined by a continuous expression involving the\nhyperbolic tangent, the integrator input `v`, the integrator output `w`,\nthe limit `limitMax` or `limitMin` and its filtered derivative\n`derLimitMax` or `derLimitMin`.\n\nThe parameters `TolInput` and `TolOutput` determine the width of the\ntransition zone from one domain to another.\n\nThe output `y` is the result of the limitation of `w` by both variable\nlimits.\n\nIf the \"upper\" limit is smaller than the \"lower\" one, the output `y` is\nruled by the parameter `DefaultLimitMax`: `y` is equal to either\n`limitMax` or `limitMin`.\n\n**set/reset**\n\nThe integrator's output is forced to the value of `set` while\n`reset=true`, as it is descibed in [@IEC_61400-27-1].\n\nWhen `reset` returns to false (=falling edge), the integrator's state is\nreinitialized to set to resume integration without a jump discontinuity\n(change `ReinitWhenResetIsReleased` to `false` to reinitialize at a\nrising edge instead).\n\n**freeze**\n\nIf boolean input is set to true, the derivative of the state variable is\nset to zero.\n\n**Parameters**\n\nTypical values were gathered from the *DIgSILENT PowerFactory* [@DIgSILENT2024]\nimplementation of the model.\n\n| name | type | unit | base | description | typical value |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| $\\mathrm{d}p_{\\mathrm{max}}$ | float | $pu$ | $S_{\\mathrm{base}} / \\mathrm{s}$ | Maximum ramp rate of wind turbine power | $999$ |\n| $\\mathrm{d}p_{\\mathrm{refmax}}$ | float | $pu$ | $S_{\\mathrm{base}} / \\mathrm{s}$ | Maximum ramp rate for reference power of the wind turbine | $0.3$ |\n| $\\mathrm{d}p_{\\mathrm{refmin}}$ | float | $pu$ | $S_{\\mathrm{base}} / \\mathrm{s}$ | Minimum ramp rate for reference power of the wind turbine | $-0.3$ |\n| $\\mathrm{d}\\tau_{\\mathrm{max}}$ | float | $pu$ | $T_{\\mathrm{base}} / \\mathrm{s}$ | Torque ramp rate limit, as required by some grid codes | $0.25$ |\n| $\\mathrm{d}\\tau_{\\mathrm{maxUVRT}}$ | float | $pu$ | $T_{\\mathrm{base}} / \\mathrm{s}$ | Torque rise rate limit during UVRT | $0$ |\n| $K_{\\mathrm{DTD}}$ | float | $pu$ | $S_{\\mathrm{base}} / \\Omega_{\\mathrm{base}}$ | Active drive train damping: gain | $1.5$ (or $0$ if $M_\\mathrm{\\omega Tqpi}=\\mathrm{false}$) [@Lorenzo-Bonache2017] |\n| $K_{\\mathrm{Ip}}$ | float | $pu$ | $T_{\\mathrm{base}} / \\Omega_{\\mathrm{base}} / \\mathrm{s}$ | Integrator time constant of the PI controller | $5$ |\n| $K_{\\mathrm{Pp}}$ | float | $pu$ | $T_{\\mathrm{base}} / \\Omega_{\\mathrm{base}}$ | Proportional gain of the PI controller | $3$ |\n\n: Parameters of WT P control module, based on [@IEC_61400-27-1], [@Lorenzo-Bonache2017] and [@DIgSILENT2024] {#tbl-parameters}\n\n| $p$ | $\\omega(p)$ |\n|:-----|:------------|\n| 0    | 0.76        |\n| 0.3  | 0.76        |\n| 0.31 | 0.86        |\n| 0.4  | 0.94        |\n| 0.5  | 1           |\n| 1    | 1           |\n\n: Typical values for lookup table $\\omega(p)$, based on [@DIgSILENT2024] implementation {#tbl-wtLookupTable}\n\n## Open Source Implementations\n\n| Software | URL | Last consulted date |\n| :--- | :--- | :--- |\n| Open Modelica / Dynawo | [Dynawo](https://github.com/dynawo/dynawo) | 29/01/2025 |\n\n: Open Source Implementations {#tbl-implementations}\n\nFor modeling assumptions and test results, see [Dynawo](https://github.com/dynawo/dynawo) repository. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}