{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Quarto Basics\"\n",
        "author: \"\"\n",
        "bibliography: ../../_bibliography/references.bib\n",
        "jupyter: python3\n",
        "freeze: true\n",
        "order: 3\n",
        "---\n",
        "\n",
        "# Introduction\n",
        "\n",
        "This guide demonstrates how to create rich, interactive content using Quarto. Quarto is a powerful publishing system that allows you to combine narrative text, executable code, equations, figures, tables, and citations into beautiful documents.\n",
        "\n",
        "Each section below includes:\n",
        "\n",
        "  - **Code samples**\n",
        "  - **Rendered results** showing what the output looks like\n",
        "\n",
        "Let's explore the main features you'll need for academic and technical writing.\n",
        "\n",
        "# Text Formatting and Markdown Basics\n",
        "\n",
        "## Basic Text Formatting\n",
        "\n",
        "Here are the fundamental text formatting options:\n",
        "\n",
        "```markdown\n",
        "*italic text*,\n",
        "**bold text**,\n",
        "***bold italic text***\n",
        "~~strikethrough text~~\n",
        "`inline code`\n",
        "superscript^2^, subscript~2~\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        "- *italic text*,\n",
        "- **bold text**,\n",
        "- ***bold italic text***\n",
        "- ~~strikethrough text~~\n",
        "- `inline code`\n",
        "- superscript^2^, subscript~2~\n",
        "\n",
        "## Headings and Structure\n",
        "\n",
        "```markdown\n",
        "# Main Heading (Level 1)\n",
        "## Section Heading (Level 2) \n",
        "### Subsection Heading (Level 3)\n",
        "#### Sub-subsection Heading (Level 4)\n",
        "```\n",
        "**Rendered result:**\n",
        "\n",
        "# Main Heading (Level 1)\n",
        "## Section Heading (Level 2) \n",
        "### Subsection Heading (Level 3)\n",
        "#### Sub-subsection Heading (Level 4)\n",
        "\n",
        "## Lists\n",
        "\n",
        "### Unordered Lists\n",
        "```markdown\n",
        "* First item\n",
        "  + Sub-item 1\n",
        "  + Sub-item 2\n",
        "    - Sub-sub-item\n",
        "* Second item\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        "* First item\n",
        "  + Sub-item 1\n",
        "  + Sub-item 2\n",
        "    - Sub-sub-item\n",
        "* Second item\n",
        "\n",
        "### Ordered Lists\n",
        "```markdown\n",
        "1. First numbered item\n",
        "2. Second numbered item\n",
        "   i. Sub-item with roman numerals\n",
        "   ii. Another sub-item\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        "1. First numbered item\n",
        "2. Second numbered item\n",
        "   i. Sub-item with roman numerals\n",
        "   ii. Another sub-item\n",
        "\n",
        "# Mathematical Equations {#sec-equations}\n",
        "\n",
        "## Inline Math\n",
        "\n",
        "You can include mathematical expressions inline using single dollar signs:\n",
        "\n",
        "- `$E = mc^2` =>  $E = mc^2$\n",
        "- `$\\alpha + \\beta = \\gamma$` => $\\alpha + \\beta = \\gamma$.\n",
        "\n",
        "## Display Equations\n",
        "\n",
        "For larger equations, use double dollar signs:\n",
        "\n",
        "```markdown\n",
        "$$\n",
        "\\frac{\\partial^2 u}{\\partial t^2} = c^2 \\nabla^2 u\n",
        "$$ {#eq-wave}\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "$$\n",
        "\\frac{\\partial^2 u}{\\partial t^2} = c^2 \\nabla^2 u\n",
        "$$ {#eq-wave}\n",
        "\n",
        "```markdown\n",
        "$$\n",
        "P(X = k) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\n",
        "$$ {#eq-poisson}\n",
        "```\n",
        "**Rendered result:**\n",
        "$$\n",
        "P(X = k) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\n",
        "$$ {#eq-poisson}\n",
        "\n",
        "## Multi-line Equations\n",
        "\n",
        "```markdown\n",
        "$$\n",
        "\\begin{align}\n",
        "f(x) &= ax^2 + bx + c \\\\\n",
        "f'(x) &= 2ax + b \\\\\n",
        "f''(x) &= 2a\n",
        "\\end{align}\n",
        "$$ {#eq-derivatives}\n",
        "```\n",
        "The `{#eq-derivatives}` is used to reference the equation in the text (see [Cross-References](#sec-crossref)).\n",
        "\n",
        "**Rendered result:**\n",
        "$$\n",
        "\\begin{align}\n",
        "f(x) &= ax^2 + bx + c \\\\\n",
        "f'(x) &= 2ax + b \\\\\n",
        "f''(x) &= 2a\n",
        "\\end{align}\n",
        "$$ {#eq-derivatives}\n",
        "\n",
        "# Figures and Images {#sec-figures}\n",
        "\n",
        "## Static Images\n",
        "\n",
        "You can include static images using markdown syntax:\n",
        "\n",
        "```markdown\n",
        "![Quarto Logo](../../assets/img/Logo_colib.svg){#fig-logo fig-alt=\"The Colib project logo\" width=\"200px\"}\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        "![Quarto Logo](../../assets/img/Logo_colib.svg){#fig-logo fig-alt=\"The Colib project logo\" width=\"200px\"}\n",
        "\n",
        "# Cross-References {#sec-crossref}\n",
        "\n",
        "## How Cross-References Work\n",
        "\n",
        "Quarto automatically generates numbered cross-references for:\n",
        "\n",
        "- **Equations**: Use `eq-` prefix (e.g., `#eq-wave`)\n",
        "- **Sections**: Use `sec-` prefix (e.g., `#sec-figures`)\n",
        "- **Figures**: Use `fig-` prefix (e.g., `#fig-logo`)\n",
        "- **Tables**: Use `tbl-` prefix (e.g., `#tbl-features`)\n",
        "\n",
        "## Examples of Cross-References\n",
        "\n",
        "```markdown\n",
        "- Reference an equation: \"Using the wave equation (@eq-wave)...\"\n",
        "- Reference a section: \"Details are provided in @sec-figures...\"\n",
        "- Reference a figure: \"See @fig-logo for the Colib project logo...\"\n",
        "- Reference a table: \"The results in @tbl-features indicate...\"\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        "- Reference an equation: \"Using the wave equation (@eq-wave)...\"\n",
        "- Reference a section: \"Details are provided in @sec-figures...\"\n",
        "- Reference a figure: \"See @fig-logo for the Colib project logo...\"\n",
        "- Reference a table: \"The results in @tbl-features indicate...\"\n",
        "\n",
        "# Citations and References {#sec-citations}\n",
        "\n",
        "## Citation Syntax\n",
        "\n",
        "Quarto uses BibTeX for managing references. Citations are created using `@` followed by the citation key:\n",
        "\n",
        "- Author-date citation: `@marrero2019` produces: Studies by @DUMMY:2 show...\n",
        "- Parenthetical citation: `[@marrero2019]` produces: Previous research [@DUMMY:2] indicates...\n",
        "\n",
        "## Adding References\n",
        "\n",
        "References should be stored in a `.bib` files and specified in the YAML header. You can specify multiple files by adding them to the `bibliography` list:\n",
        "\n",
        "```yaml\n",
        "bibliography: \n",
        "  - references.bib\n",
        "  - references_2.bib\n",
        "```\n",
        "\n",
        "## Example Bibliography Entry\n",
        "\n",
        "```bibtex\n",
        "@article{example2024,\n",
        "  title={An Example Article},\n",
        "  author={Smith, John and Doe, Jane},\n",
        "  journal={Journal of Examples},\n",
        "  volume={42},\n",
        "  number={1},\n",
        "  pages={1--10},\n",
        "  year={2024},\n",
        "  publisher={Example Press}\n",
        "}\n",
        "```\n",
        "\n",
        "# Advanced Features {#sec-advanced}\n",
        "\n",
        "## Callout Blocks\n",
        "\n",
        "Quarto provides several types of callout blocks:\n",
        "\n",
        "```markdown\n",
        ":::{.callout-note}\n",
        "This is a note callout. Use it for additional information.\n",
        ":::\n",
        "\n",
        ":::{.callout-tip}\n",
        "This is a tip callout. Perfect for helpful suggestions.\n",
        ":::\n",
        "\n",
        ":::{.callout-warning}\n",
        "This is a warning callout. Use for important caveats.\n",
        ":::\n",
        "\n",
        ":::{.callout-important}\n",
        "This is an important callout. Use for critical information.\n",
        ":::\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        ":::{.callout-note}\n",
        "This is a note callout. Use it for additional information.\n",
        ":::\n",
        "\n",
        ":::{.callout-tip}\n",
        "This is a tip callout. Perfect for helpful suggestions.\n",
        ":::\n",
        "\n",
        ":::{.callout-warning}\n",
        "This is a warning callout. Use for important caveats.\n",
        ":::\n",
        "\n",
        ":::{.callout-important}\n",
        "This is an important callout. Use for critical information.\n",
        ":::\n",
        "\n",
        "## Source code\n",
        "\n",
        "Use ``` to delimit blocks of source code and a language to syntax highlight code blocks.\n",
        "\n",
        "Quarto can provide syntax highlighting for over 140 different languages (see the output of `quarto pandoc --list-highlight-languages` for a list of all of them).\n",
        "\n",
        "````markdown\n",
        "```python\n",
        "#| label: fig-polar\n",
        "#| fig-cap: \"A line plot on a polar axis\"\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "r = np.arange(0, 2, 0.01)\n",
        "theta = 2 * np.pi * r\n",
        "```\n",
        "````\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        "```python\n",
        "#| label: fig-polar\n",
        "#| fig-cap: \"A line plot on a polar axis\"\n",
        "\n",
        "import numpy as np\n",
        "```python\n",
        "#| label: fig-polar\n",
        "#| fig-cap: \"A line plot on a polar axis\"\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "r = np.arange(0, 2, 0.01)\n",
        "theta = 2 * np.pi * r\n",
        "```\n",
        "\n",
        "## Code Blocks computation\n",
        "\n",
        "Code blocks that use braces around the language name (e.g. ` ```{python}`) are executable, and will be run by Quarto during render. Supported languages for execution are:\n",
        "\n",
        "- Python\n",
        "- R\n",
        "- Julia\n",
        "- Observable JS\n",
        "\n",
        "You will find below a simple example. This example make use of the `matplotlib` and `plotly` Python packages to create a line plot on a polar axis, therefore they need to be installed before running the code block.\n",
        "\n",
        "```markdown\n",
        "---\n",
        "title: \"matplotlib demo\"\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "For a demonstration of a line plot on a polar axis, see @fig-polar."
      ],
      "id": "0abb2349"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-polar\n",
        "#| fig-cap: A line plot on a polar axis\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "r = np.arange(0, 2, 0.01)\n",
        "theta = 2 * np.pi * r\n",
        "fig, ax = plt.subplots(\n",
        "  subplot_kw = {'projection': 'polar'} \n",
        ")\n",
        "ax.plot(theta, r)\n",
        "ax.set_rticks([0.5, 1, 1.5, 2])\n",
        "ax.grid(True)\n",
        "plt.show()"
      ],
      "id": "fig-polar",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Tables {#sec-tables}\n",
        "\n",
        "## Markdown Tables\n",
        "\n",
        "You can create tables using markdown syntax:\n",
        "\n",
        "```markdown\n",
        "| Feature | Supported | Notes |\n",
        "|---------|-----------|-------|\n",
        "| Code execution | ✓ | Python, R, Julia |\n",
        "| Math equations | ✓ | LaTeX syntax |\n",
        "| Cross-references | ✓ | Figures, tables, sections |\n",
        "| Citations | ✓ | BibTeX format |\n",
        "```\n",
        "\n",
        "**Rendered result:**\n",
        "\n",
        "| Feature | Supported | Notes |\n",
        "|---------|-----------|-------|\n",
        "| Code execution | ✓ | Python, R, Julia |\n",
        "| Math equations | ✓ | LaTeX syntax |\n",
        "| Cross-references | ✓ | Figures, tables, sections |\n",
        "| Citations | ✓ | BibTeX format |\n",
        "\n",
        ": Quarto features overview {#tbl-features}\n",
        "\n",
        "## Tables from Code\n",
        "\n",
        "**Code sample:**\n",
        "```python\n",
        "#| label: tbl-data\n",
        "#| tbl-cap: \"Sample data analysis results\"\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Create sample data\n",
        "data = {\n",
        "    'Method': ['Linear', 'Quadratic', 'Exponential', 'Logarithmic'],\n",
        "    'R²': [0.65, 0.89, 0.94, 0.72],\n",
        "    'RMSE': [2.3, 1.1, 0.8, 1.9],\n",
        "    'Status': ['Fair', 'Good', 'Excellent', 'Good']\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(df.to_string(index=False))\n",
        "```\n",
        "\n",
        "**Example output:**\n",
        "```\n",
        "      Method   R²  RMSE    Status\n",
        "      Linear 0.65   2.3      Fair\n",
        "   Quadratic 0.89   1.1      Good\n",
        " Exponential 0.94   0.8 Excellent\n",
        " Logarithmic 0.72   1.9      Good\n",
        "```\n",
        "\n",
        "# References\n",
        "\n",
        "::: {#refs}\n",
        ":::\n"
      ],
      "id": "01c6a91d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/juliendu/.pyenv/versions/3.10.1/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}